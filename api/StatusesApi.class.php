<?php//微博Api接口class StatusesApi extends Api{	//获取最新更新的公共微博消息	function public_timeline(){		return D('WeiboApi','weibo')->public_timeline( $this->since_id , $this->max_id , $this->count , $this->page,  $this->mid ) ;	}	//获取当前用户所关注用户的最新微博信息	function friends_timeline(){		return D('WeiboApi','weibo')->friends_timeline( $this->mid , $this->since_id , $this->max_id , $this->count , $this->page ) ;	}	//获取用户发布的微博信息列表	function user_timeline() {		return D('WeiboApi','weibo')->user_timeline( $this->user_id , $this->user_name , $this->since_id , $this->max_id , $this->count , $this->page,$this->mid ) ;	}	//获取@当前用户的微博列表	function mentions(){		return D('WeiboApi','weibo')->mentions($this->mid , $this->since_id , $this->max_id , $this->count , $this->page);	}	//获取当前用户发送及收到的评论列表	function comments_timeline(){		return D('WeiboApi','weibo')->getCommentlist($this->mid,'all', $this->since_id , $this->max_id , $this->count , $this->page);	}	function show(){		return D('Weibo','weibo')->getOneApi($this->id, null, $this->mid);	}	//获取当前用户发出的评论	function comments_by_me() {		return D('WeiboApi','weibo')->getCommentlist($this->mid,'send',$this->since_id , $this->max_id , $this->count , $this->page);	}	//获取当前用户收到的评论	function comments_receive_me() {		return D('WeiboApi','weibo')->getCommentlist($this->mid,'receive',$this->since_id , $this->max_id , $this->count , $this->page);	}	//获取指定微博的评论列表	function comments(){		return D('WeiboApi','weibo')->comments($this->id,$this->since_id , $this->max_id , $this->count , $this->page);	}	//发布一条微博	function update(){            if(!$this->_canWeibo())                return 0;		$data['content'] = str_replace('xyhui.com','pocketuni.net', $this->data['content']);		$id = D('Weibo','weibo')->publish( $this->mid,$data,$this->data['from'],0,'',array('sina'));		return (int) $id;	}	//上传一张图片并返回图片地址    function uploadpic(){    	/**        * 20121018 @yelo        * 增加上传类型验证        */        $pathinfo = pathinfo($_FILES['pic']['name']);        $ext = $pathinfo['extension'];        $allowExts = array('jpg', 'png', 'gif', 'jpeg','bmp');        $uploadCondition = $_FILES['pic'] && in_array(strtolower($ext),$allowExts,true);        if( $uploadCondition ){    		//执行上传操作    		$savePath =  $this->_getSaveTempPath();    		$filename = md5( time().'teste' ).'.'.substr($_FILES['pic']['name'],strpos($_FILES['pic']['name'],'.')+1);	    	if(@copy($_FILES['pic']['tmp_name'], $savePath.'/'.$filename) || @move_uploaded_file($_FILES['pic']['tmp_name'], $savePath.'/'.$filename))	        {	        	$result['boolen']    = 1;	        	$result['type_data'] = 'temp/'.$filename;	        	$result['picurl']    = SITE_PATH.'/uploads/temp/'.$filename;	        } else {	        	$result['boolen']    = 0;	        	$result['message']   = '上传失败';	        }    	}else{        	$result['boolen']    = 0;        	$result['message']   = '上传失败';    	}		return $result;    }    //上传临时文件    private function _getSaveTempPath(){        $savePath = SITE_PATH.'/data/uploads/temp';        if( !file_exists( $savePath ) ) mk_dir( $savePath  );        return $savePath;    }	//发布一个图片微博	function upload(){            if(!$this->_canWeibo())                return 0;		$uppic = $this->uploadpic();		$pic = $uppic['boolen']?$uppic['type_data']:h($this->data['pic']);		$data['content'] = $this->data['content'];		$id = D('Weibo','weibo')->publish( $this->mid,$data,$this->data['from'],1,$pic,array('sina'));		return (int) $id;	}	//删除一条微博	function destroy(){		$result = D('Operate','weibo')->deleteMini($this->id,$this->mid);		return (int) $result;	}	//删除一条评论	function commentDestroy()	{		$result = D('Comment','weibo')->deleteComments($this->id, $this->mid);		return (int) $result['boolen'];	}	//对一个微博发一条评论	function comment(){            if(!$this->_canWeibo())                return 0;		$post['reply_comment_id'] = intval( $this->data['reply_comment_id'] );  //回复 评论的ID		$post['weibo_id']         = intval( $this->data['weibo_id'] );          //回复 微博的ID		$post['content']          = $this->data['comment_content'];         	//回复内容		$post['transpond']        = intval($this->data['transpond']);           //是否同是发布一条微博		$post['from']             = intval($this->data['from']);            	//来自哪里		$id = D('Comment','weibo')->doaddcomment( $this->mid ,$post,true );		return (int) $id;	}	//转发一条微博	function repost(){            if(!$this->_canWeibo())                return 0;		$post['content']		=  $this->data['content'] ;                  //转发内容		$post['transpond_id']   = intval( $this->data['transpond_id'] );        //转发的微博ID		$post['reply_weibo_id'] = explode(',',$this->data['reply_data']);       //给xx同时评论的数组对象(此处传过来的是微博的ID)		$post['from'] 			= intval($this->data['from']);		$id = D('Weibo','weibo')->transpond($this->mid,$post);		return (int) $id;	}        private function _canWeibo(){            $last = M('weibo_time')->getField('ctime', 'uid='.$this->mid);            $data['uid'] = $this->mid;            $data['ctime'] = time();            if(!$last){                M('weibo_time')->add($data);                return true;            }            if((time()-$last) > 30){                M('weibo_time')->save($data);                return true;            }            return false;        }	//用户关注列表	function following(){		return D('WeiboApi','weibo')->following($this->user_id , $this->user_name , $this->since_id , $this->max_id , $this->count , $this->page);	}	//用户粉丝列表	function followers(){		return D('WeiboApi','weibo')->followers($this->user_id , $this->user_name , $this->since_id , $this->max_id , $this->count , $this->page);	}	//用户互粉列表	function eachFollower(){		return D('WeiboApi','weibo')->eachFollower($this->user_id , $this->user_name , $this->since_id , $this->max_id , $this->count , $this->page);	}	// 搜索微博	public function search()	{		$result = D('WeiboApi','weibo')->search($this->data['key'], $this->since_id, $this->max_id, $this->count, $this->page,$this->mid);		if (empty($result))			$result = array();		return $result;	}        //1.寻找好友        //搜索好友增加学校条件搜索，默认选中用户当前学校 StatusesApi.class searchuser(sid,key)        //输入:学校id, 关键字 (需登录)        //返回用户列表	public function searchuser()	{		$result = D('WeiboApi','weibo')->searchUser($this->data['key'], $this->mid, $this->since_id, $this->max_id, $this->count, $this->page,$this->data['sid'],$this->data['sid1']);		if (empty($result))			$result = array();		$allowed_key = array('ctime', 'domain', 'weibo_count', 'face', 'followed_count', 'followers_count', 'is_active', 'is_init', 'is_followed', 'location', 'mini', 'sex', 'uid', 'uname');		foreach ($result as $k => $v) {			// 剔除敏感信息			foreach ($v as $k2 => $v2)				if (!in_array($k2, $allowed_key))					unset($result[$k][$k2]);			$result[$k]['timestamp'] = $v['ctime'];			$result[$k]['ctime']	 = date('Y-m-d H:i:s', $v['ctime']);			//$result[$k]['location']  = (string)$v['location'];			$result[$k]['location']  = '';			$result[$k]['sex']       = getSex($v['sex']);			$result[$k]['school']       = tsGetSchoolByUid($v['uid']);		}		return $result;	}//3.检测用户是否绑定手机号 StatusesApi.class getMobile()//输入: 用户token, secret (需登录)//若己绑定, 返回绑定的手机号, 若未绑定, 返回""        public function getMobile(){            return array('response'=>M('user')->where("uid=$this->mid")->getField('mobile'));        }        public function mobileBind2(){            $res = array('status'=>0);            $pass = t($_REQUEST['pass']);            $user = M('user')->field('password,mobile')->where('uid='.$this->mid)->find();            if (!$user || (md5($pass) != $user['password'] && codePass($pass)!= $user['password'])) {                $res['msg'] = '登录密码不对';                return $res;            }            $mobile = t($_REQUEST['mobile']);            if (!isValidMobile($mobile)) {                $res['msg'] = '输入11位有效手机号码';                return $res;            }            $map['mobile'] = $mobile;            $hasMobile = M('user')->where($map)->field('uid')->find();            if($hasMobile && $hasMobile['uid']!=$this->mid){                $res['msg'] = '该手机号码已绑定';                return $res;            }            if(M('user')->where('uid='.$this->mid)->save($map)){                S('S_userInfo_' . $this->mid, null);                $res['status'] = 1;                $res['msg'] = '手机绑定成功';                return $res;            }            $res['msg'] = '操作失败，请稍后再试';            return $res;        }                //发送验证码        public function mobileSendSms(){            $res = array('status'=>0);            $pass = t($_REQUEST['pass']);            $user = M('user')->field('password,mobile')->where('uid='.$this->mid)->find();            if (!$user || (md5($pass) != $user['password'] && codePass($pass)!= $user['password'])) {                $res['msg'] = '登录密码不对';                return $res;            }            $mobile = t($_REQUEST['mobile']);            if (!isValidMobile($mobile)) {                $res['msg'] = '输入11位有效手机号码';                return $res;            }            $map['mobile'] = $mobile;            $hasMobile = M('user')->where($map)->field('uid')->find();            if($hasMobile && $hasMobile['uid']!=$this->mid){                $res['msg'] = '该手机号码已绑定';                return $res;            }            $send = D('UserMobile','home')->addRow($this->mid,$mobile);            if($send == -3){                $res['msg'] = '5分钟内只能发送一次';                return $res;            }elseif($send == -4){                $res['msg'] = '1天内最多发送3次';                return $res;            }elseif($send != 1){                $res['msg'] = '发送验证码短信失败，请稍后再试';                return $res;            }            $res['status'] = 1;            return $res;        }        public function mobileBind(){            $code = intval($_REQUEST['code']);            $mobile = t($_REQUEST['mobile']);            $send = D('UserMobile','home')->bind($this->mid,$mobile,$code);            if($send){                $res['status'] = 1;            }else{                $res['status'] = 0;                $res['msg'] = '验证失败';            }            return $res;        }       public function topic() {        $page = intval($_REQUEST['page']);        if (!$page) {            $page = 1;        }        $count = intval($_REQUEST['count']);        if (!$count) {            $count = 10;        }        $data['search_key'] = $this->__getSearchKey();        // 专题信息            if (null == $data['search_key']) {                 $res['msg'] ='该话题不存在';                 return $res;            }        $data['name'] = t($data['search_key']);        $data['search_key'] = $data['search_key'] ? $data['search_key'] : html_entity_decode($data['name'], ENT_QUOTES);        $data['search_key_id'] = D('Topic', 'weibo')->getTopicId($data['search_key']);        $data['followState'] = D('Follow', 'weibo')->getTopicState($this->mid, $data['search_key']);        // 微博列表        $data['list'] = D('Operate', 'weibo')->apiDoSearchWithTopic("#{$data['name']}#",$count,$page,array(),$this->mid);        return $data;    }  //我的许愿盒我的求助专题微博    public function myTopic() {        $page = intval($_REQUEST['page']);        if (!$page) {            $page = 1;        }        $count = intval($_REQUEST['count']);        if (!$count) {            $count = 10;        }        $data['search_key'] = $this->__getSearchKey();        // 专题信息        if (null == $data['search_key']) {            $res['msg'] = '该话题不存在';            return $res;        }        $data['name'] = t($data['search_key']);        $data['search_key'] = $data['search_key'] ? $data['search_key'] : html_entity_decode($data['name'], ENT_QUOTES);        $data['search_key_id'] = D('Topic', 'weibo')->getTopicId($data['search_key']);        $data['followState'] = D('Follow', 'weibo')->getTopicState($this->mid, $data['search_key']);        // 微博列表        $listMap['uid'] = $this->mid;        $data['list'] = D('Operate', 'weibo')->apiDoSearchWithTopic("#{$data['name']}#", $count, $page,$listMap,$this->mid);        return $data;    }       private function __getSearchKey() {        $key = '';        // 为使搜索条件在分页时也有效，将搜索条件记录到SESSION中        if (isset ( $_REQUEST ['k'] ) && ! empty ( $_REQUEST ['k'] )) {            if ($_GET ['k']) {                $key = html_entity_decode ( urldecode ( $_GET ['k'] ), ENT_QUOTES );            } elseif ($_POST ['k']) {                $key = $_POST ['k'];            }            // 关键字不能超过200个字符            if (mb_strlen ( $key, 'UTF8' ) > 200)                $key = mb_substr ( $key, 0, 200, 'UTF8' );        }		$key = str_replace(array('%','\'','"','<','>'),'',$key);        return trim ( $key );    }    public function recommendTopic(){        $data= D ('Topic', 'weibo')->getHot('recommend',null,$data['limit']);       return $data;    }    public function weibo() {        $page = intval($_REQUEST['page']);        if (!$page) {            $page = 1;        }        $count = intval($_REQUEST['count']);        if (!$count) {            $count = 10;        }       return D('WeiboApi', 'weibo')->apiWeibo($count,$page,$this->mid);    }    public function recommendUser(){        $sid1 = 0;        if($_REQUEST['departId']){            $sid1 = intval($_REQUEST['departId']);        }        $sid = intval($_REQUEST['sid']);        $key = $sid1?$sid1:$sid;        if ($cache = S('Cache_Recommen_Uid_' . $key)) {            $uids = $cache;        }else{            if($sid1){                $users = M('user')->where('sid1=' . $sid1)->field('uid')->findAll();            }else{                $users = M('user')->where('sid=' . $sid)->field('uid')->findAll();            }            $uids = getSubByKey($users, 'uid');            S('Cache_Recommen_Uid_' . $key, $uids);        }        $keys = array_rand($uids, 10);        if(!$keys){            return array();        }        $recUids = array();        foreach ($keys as $v) {            $recUids[] = $uids[$v];        }        $map['uid'] = array('in', $recUids);        $res = M('user')->where($map)->field('uid,uname,realname')->findAll();        foreach ($res as $key=>$v) {            $res[$key]['school'] = tsGetSchoolByUid($v['uid']);            $res[$key]['face'] = getUserFace($v['uid']);        }        return $res;    }    public function partner(){        $count = intval($_REQUEST['count']);        $count = $count?$count:10;        $p = intval($_REQUEST['p']);        $_REQUEST['p'] = $p ? $p : 1;        $cityId = getCityByUid($this->mid);        $map = array();        if($cityId==1)            $map['type'] = 1;        $list = M('partner')->where($map)->findPage($count);        return $list['data'];    }    //微博邀请好友玩游戏    public function gameInvitation() {        $inviteUid = intval($_REQUEST['uid']);        if (!$inviteUid) {            $this->MobileError('请选择邀请对象');        }        $uname = M('user')->getField('uname', 'uid=' . $inviteUid);        $data['content'] = str_replace('xyhui.com', 'pocketuni.net', $this->data['content']);        $data['content'] = '@' . $uname . ' ' . $data['content'];        $id = D('Weibo', 'weibo')->publish($this->mid, $data, $this->data['from'], 0, '', array('sina'));        if (!$id) {            $this->MobileError('邀请失败');        }else{            return true;        }    }    private function MobileError($error = "MobileError") {        header('Content-Type: application/json; charset=utf-8');        $result['message'] = $error;        echo json_encode($result);        exit;    }    public function lyLucky(){        $data['img'] = 'http://pocketuni.net/public/themes/newstyle/images/szly.jpg';        $data['win'] = intval(model('Ly')->cj($this->mid));        if($data['win']){            $data['msg'] = '恭喜您中奖，获得了苏州乐园门票一张。请尽快绑定您的手机，以便客服联系您，发放奖品。';        }else{            $data['msg'] = '很遗憾今天没能抽中，明天继续加油！';        }        return $data;    }    public function lyCj(){        $data['show'] = intval(model('Ly')->canCj($this->mid));        $data['title'] = '旅游抽奖';        $data['desc'] = '苏州乐园门票抽奖活动开始啦！每天都有一次赢大奖机会，开始抽奖？';        return $data;    }    //用户账户余额    public function moneyRest(){        $rest = Model('Money')->getMoneyCache($this->mid);        return money2xs($rest);    }}?>